extends Node2D

@export var location_scene: PackedScene
@export var title_label: Label
@export var description_label: Label
@export var event_panel: PanelContainer
@export var event_card_scene: PackedScene

@onready var event_manager = get_node_or_null("/root/Main/EventManager")
@onready var game_resources = get_node_or_null("/root/Main/GameResources")

var locations_data = []
var location_nodes = {}
var active_location_id: String = ""
var visited_locations = []
var last_location_id = ""

var resources = {
	"Temperature": 100,
	"Morale": 100,
	"Food": 100,
	"Energy": 100,
	"Speed": 5
}

func _ready():
	if not game_resources:
		print("‚ùå –û—à–∏–±–∫–∞: GameResources –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–µ—Ä–µ–≤–µ!")
		return
		
	load_locations_from_json()
	draw_connections()
	
	if locations_data.size() > 0:
		var start_found = false
		for loc in locations_data:
			if loc["id"] == "start":
				update_active_location(loc["id"])
				start_found = true
				break
		
		if not start_found and locations_data.size() > 0:
			update_active_location(locations_data[0]["id"])
			
		disable_unreachable_locations()
		
	await get_tree().create_timer(0.1).timeout
	load_event_cards(active_location_id)
	
	
func save_game():
	SaveManager.save_game(self)
	
func load_game():
	return SaveManager.load_game(self)

func load_locations_from_json():
	var file = FileAccess.open("res://data/locations_new.json", FileAccess.READ)
	if not file:
		print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å locations.json")
		return

	var json_text = file.get_as_text()
	var json = JSON.parse_string(json_text)

	if not json or not json.has("locations"):
		print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON")
		return

	locations_data = json["locations"]

	# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã
	var min_x = INF
	var min_y = INF
	var max_x = -INF
	var max_y = -INF

	for loc in locations_data:
		min_x = min(min_x, float(loc["position"]["x"]))
		min_y = min(min_y, float(loc["position"]["y"]))
		max_x = max(max_x, float(loc["position"]["x"]))
		max_y = max(max_y, float(loc["position"]["y"]))

	var center_x = (min_x + max_x) / 2
	var center_y = (min_y + max_y) / 2

	var screen_center = get_viewport_rect().size / 2
	var map_offset = Vector2(-screen_center.x * 0.2, -screen_center.y * 0.2)

	for loc in locations_data:
		loc["position"]["x"] = (float(loc["position"]["x"]) - center_x) * 150
		loc["position"]["y"] = (float(loc["position"]["y"]) - center_y) * 150

		loc["position"]["x"] += screen_center.x + map_offset.x
		loc["position"]["y"] += screen_center.y + map_offset.y
		
		create_location(loc)

func create_location(loc):
	var location_instance = location_scene.instantiate()
	add_child(location_instance)
	location_instance.default_texture = load("res://assets/location_icon.png")
	location_instance.active_texture = load("res://assets/location_icon_active.png")
	location_instance.disabled_texture = load("res://assets/location_icon_disabled.png")
	location_instance.position = Vector2(loc["position"]["x"], loc["position"]["y"])
	location_instance.location_id = loc["id"]
	location_instance.title = loc.get("title", "")
	location_instance.description = loc.get("description", "")
	location_instance.connect("location_selected", Callable(self, "_on_location_selected"))
	
	location_nodes[loc["id"]] = location_instance

func _on_location_selected(location_id: String):
	move_to_location(location_id)

func get_location_events(location_id):
	var cards = event_manager.get_location_cards(location_id)
	if cards.size() > 0:
		print("–°–æ–±—ã—Ç–∏—è –¥–ª—è", location_id, ":", cards)
	else:
		print("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è", location_id)

func draw_connections():
	var path_lines = $Connections/PathLines
	path_lines.clear_points()
	
	var drawn_connections = {}

	for loc in locations_data:
		var start_node = location_nodes.get(loc["id"], null)
		if start_node:
			for connected_id in loc["connectedNodes"]:
				var end_node = location_nodes.get(connected_id, null)
				if end_node:
					var key = [loc["id"], connected_id]
					key.sort()  
					var key_str = key[0] + "-" + key[1]  

					if key_str in drawn_connections:
						continue  
					
					drawn_connections[key_str] = true

					path_lines.add_point(start_node.position)
					path_lines.add_point(end_node.position)

func update_active_location(location_id: String):
	if location_nodes.has(location_id):
		# –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Ç–æ—á–∫—É
		for node in location_nodes.values():
			node.set_active(false)

		# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Ç–æ—á–∫—É
		location_nodes[location_id].set_active(true)
		active_location_id = location_id

		# –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ª–æ–∫–∞—Ü–∏–∏
		var location_data = get_location_data(location_id)
		if location_data:
			title_label.text = location_data.get("title", "Unknown Location")
			description_label.text = location_data.get("description", "No description available.")
		
		# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏–π
		load_event_cards(location_id)
		disable_unreachable_locations()

func get_location_data(location_id: String) -> Dictionary:
	for loc in locations_data:
		if loc["id"] == location_id:
			return loc
	return {}

func load_event_cards(location_id: String):
	# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
	for child in event_panel.get_children():
		child.queue_free()

	# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏–π
	if event_manager:
		var cards = event_manager.get_location_cards(location_id)
		if cards.size() > 0:
			for card in cards:
				create_event_card(card)

func create_event_button(card: Dictionary):
	var button = Button.new()
	button.text = card.get("title", "Unknown Event")
	button.tooltip_text = card.get("description", "No description available.")
	button.pressed.connect(func(): apply_event_effect(card))
	event_panel.add_child(button)
	
func create_event_card(card: Dictionary):
	if not event_card_scene:
		print("–û—à–∏–±–∫–∞: –ü—Ä–µ—Ñ–∞–± –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!")
		return

	var event_card_instance = event_card_scene.instantiate()
	
	var title_node = event_card_instance.get_node_or_null("VBoxContainer/Title")
	var description_node = event_card_instance.get_node_or_null("VBoxContainer/Description")
	var apply_button = event_card_instance.get_node_or_null("VBoxContainer/ApplyButton")

	if not title_node or not description_node or not apply_button:
		print("‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–æ–¥–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏!")
		return

	title_node.text = card.get("title", "Unknown Event")
	description_node.text = card.get("description", "No description available.")

	apply_button.pressed.connect(func():
		apply_event_effect(card)
		event_card_instance.queue_free()
	)

	event_panel.add_child(event_card_instance)
	event_card_instance.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	event_card_instance.size_flags_vertical = Control.SIZE_SHRINK_CENTER

func move_to_location(location_id: String):
	print("–í—ã–∑–≤–∞–Ω move_to_location –¥–ª—è:", location_id)
	print("–¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—á–∫–∞:", active_location_id)
	
	if not location_nodes.has(location_id):
		print("‚ùå –¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:", location_id)
		return
		
	if location_id == active_location_id:
		print("‚ö†Ô∏è –¢–æ—á–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞:", location_id)
		disable_unreachable_locations()
		return

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é —Å–Ω–∞—á–∞–ª–∞
	if game_resources:
		var energy_resource = game_resources.get_resource("Energy")
		if energy_resource and energy_resource.amount < 10:
			print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è —Ö–æ–¥–∞!")
			return

	print("üö∂ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ç–æ—á–∫—É:", location_id)

	# –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ª–æ–∫–∞—Ü–∏—é
	last_location_id = active_location_id
	
	# –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
	if active_location_id != "" and not visited_locations.has(active_location_id):
		visited_locations.append(active_location_id)
	
	# –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
	if active_location_id != "":
		location_nodes[active_location_id].set_active(false)
	
	active_location_id = location_id
	location_nodes[active_location_id].set_active(true)

	# –û–±–Ω–æ–≤–ª—è–µ–º UI
	var location_data = get_location_data(location_id)
	if location_data:
		title_label.text = location_data.get("title", "Unknown Location")
		description_label.text = location_data.get("description", "No description available.")

	# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –∑–∞—Ç—Ä–∞—á–∏–≤–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
	load_event_cards(location_id)
	if game_resources:
		game_resources.modify_resource("Energy", -10)

	print("üß© –í—ã–∑—ã–≤–∞–µ–º disable_unreachable_locations()")
	disable_unreachable_locations()
	print("‚úÖ move_to_location –∑–∞–≤–µ—Ä—à–µ–Ω")

func disable_unreachable_locations():
	var active_location_data = get_location_data(active_location_id)
	if not active_location_data:
		return

	var accessible_nodes = active_location_data.get("connectedNodes", [])
	print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —É–∑–ª—ã –æ—Ç", active_location_id, ":", accessible_nodes)

	# –°–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Ç–æ—á–∫–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç —Ç–µ–∫—É—â–µ–π
	for loc_id in location_nodes.keys():
		if loc_id == active_location_id:
			# –ê–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞
			location_nodes[loc_id].set_active(true)
		elif loc_id in accessible_nodes:
			# –°–æ—Å–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∫–ª–∏–∫–∞
			location_nodes[loc_id].set_enabled()
		else:
			# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –±–ª–æ–∫–∏—Ä—É–µ–º
			location_nodes[loc_id].set_disabled()
			
	# –ó–∞—Ç–µ–º –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
	for prev_id in visited_locations:
		location_nodes[prev_id].set_disabled()
	

func apply_event_effect(card: Dictionary):
	var effect = card.get("effect", "")
	var value = card.get("value", 0)

	match effect:
		"temperature_gain":
			update_resource("Temperature", value)
		"temperature_loss":
			update_resource("Temperature", -value)
		"morale_boost":
			update_resource("Morale", value)
		"food_gain":
			update_resource("Food", value)
		"energy_gain":
			update_resource("Energy", value)
		"speed_boost":
			update_resource("Speed", value)
		"speed_loss":
			update_resource("Speed", -value)
		"move_block":
			print("–î–≤–∏–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!")

	print("–ü—Ä–∏–º–µ–Ω–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç:", effect, "–∑–Ω–∞—á–µ–Ω–∏–µ:", value)
	AudioManager.play_sound("card_play")

func update_resource(resource: String, amount: int):
	if resources.has(resource):
		resources[resource] += amount
		print(resource, "–∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞", amount, "—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", resources[resource])

func show_event_card(event: EventCard):
	var event_card = event_card_scene.instantiate()
	add_child(event_card)
	event_card.setup(event, game_resources)
